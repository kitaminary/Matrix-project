{"version":3,"sources":["store/ActionTypes.ts","store/actions.ts","store/selectors.ts","components/Table/Table.tsx","App.tsx","store/index.ts","index.tsx"],"names":["ActionTypes","SetM","createAction","SET_M","SetN","SET_N","SetTable","SET_TABLE","SetAverageVal","SET_AVERAGE","SetX","SET_X","getMArray","initialState","M","getNArray","N","getTableArray","table","getX","x","getRowMore","length","col","newRow","i","push","id","uuidv4","value","Math","floor","random","getSum","val","sum","getLightVal","intX","tableArr","lightArray","count","forEach","char","find","elem","getAverage","average","Array","fill","console","log","indexOf","map","round","Table","dispatch","useDispatch","row","useSelector","X","useState","setLightArray","getTable","tableArray","elemOfRow","useEffect","className","rows","cols","type","classNames","includes","onFocus","onMouseOver","onMouseDown","tabled","changeValue","filter","averageVal","onClick","getRundomInt","num","App","rowArray","colArray","lengthsCol","lengthsRow","getRownCol","reducer","createReducer","delete","builder","addCase","state","action","payload","store","configureStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8ed19d41.chunk.js","sourcesContent":["/* eslint-disable no-shadow */\nexport enum ActionTypes {\n  SET_M = 'SET_M',\n  SET_N = 'SET_N',\n  SET_TABLE = 'SET_TABLE',\n  SET_AVERAGE = 'SET_AVERAGE',\n  SET_X = 'SET_X',\n}\n","import { createAction } from '@reduxjs/toolkit';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { TableType } from '../react-app-env';\nimport { ActionTypes } from './ActionTypes';\n\nexport const SetM = createAction<TableType[]>(ActionTypes.SET_M);\n\nexport const SetN = createAction<TableType[]>(ActionTypes.SET_N);\n\nexport const SetTable = createAction<TableType[][]>(ActionTypes.SET_TABLE);\n\nexport const SetAverageVal = createAction<number[]>(ActionTypes.SET_AVERAGE);\n\nexport const SetX = createAction<number>(ActionTypes.SET_X);\n","/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\nimport { State } from '../react-app-env';\n\nexport const getMArray = (initialState: State) => initialState.M;\nexport const getNArray = (initialState: State) => initialState.N;\nexport const getTableArray = (initialState: State) => initialState.table;\nexport const getAverageVal = (initialState: State) => initialState.average;\nexport const getX = (initialState: State) => initialState.x;\n","/* eslint-disable no-restricted-syntax */\nimport React, { useEffect, useState } from 'react';\nimport './Table.scss';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { TableType } from '../../react-app-env';\nimport { SetTable } from '../../store/actions';\nimport {\n  getMArray,\n  getNArray,\n  getTableArray,\n  getX,\n} from '../../store/selectors';\n\nfunction getRowMore(length: number, col: TableType[]) {\n  const newRow = [];\n\n  if (col.length > 0) {\n    for (let i = 0; i <= length; i++) {\n      newRow.push({\n        id: uuidv4(),\n        value: (Math.floor(Math.random() * 100) + 1) * col[i].value,\n      });\n    }\n  }\n\n  return newRow;\n}\n\nconst getSum = (val: TableType[]): number => {\n  let sum = 0;\n\n  for (let i = 0; i < val.length; i++) {\n    sum += val[i].value;\n  }\n\n  return sum;\n};\n\nconst getLightVal = (intX: number, tableArr: TableType[][], value: number) => {\n  const lightArray: string[] = [];\n  let count = 0;\n\n  while (lightArray.length <= intX) {\n    // eslint-disable-next-line no-loop-func\n    tableArr.forEach(char => {\n      char.find(elem => {\n        if (elem.value === (value + count)) {\n          lightArray.push(elem.id);\n        }\n\n        if (elem.value === (value - count)) {\n          lightArray.push(elem.id);\n        }\n\n        return 0;\n      });\n    });\n\n    count -= 1;\n  }\n\n  return lightArray;\n};\n\nconst getAverage = (table: TableType[][]) => {\n  let average = [];\n\n  if (table.length > 0) {\n    average = new Array(table[0].length);\n  }\n\n  average.fill(0);\n  // eslint-disable-next-line no-console\n  console.log(table);\n  for (const char of table) {\n    for (const elem of char) {\n      average[char.indexOf(elem)] += elem.value;\n    }\n  }\n\n  return average.map(sum => Math.round(sum / table.length));\n};\n\nexport const Table: React.FC = () => {\n  const dispatch = useDispatch();\n  const row = useSelector(getMArray);\n  const col = useSelector(getNArray);\n  const X = useSelector(getX);\n  const table = useSelector(getTableArray);\n  const [lightArray, setLightArray] = useState<string[]>([]);\n\n  const changeValue = (id: string) => {\n    const tabled = [...table];\n\n    for (const char of tabled) {\n      tabled[table.indexOf(char)] = char.map(elem => (elem.id === id\n        ? { value: elem.value + 1, id: elem.id }\n        : { value: elem.value, id: elem.id }));\n    }\n\n    dispatch(SetTable(tabled));\n  };\n\n  const getTable = () => {\n    const tableArray: TableType[][] = [];\n\n    for (let i = 0; i < col.length; i++) {\n      tableArray.push(row.map(elemOfRow => (\n        { id: uuidv4(), value: elemOfRow.value * col[i].value }\n      )));\n    }\n\n    dispatch(SetTable(tableArray));\n\n    return tableArray;\n  };\n\n  useEffect(() => {\n    getAverage(table);\n    dispatch(SetTable(table));\n    getTable();\n    dispatch(SetTable(getTable()));\n  }, []);\n\n  return (\n    <>\n      <table className=\"\n    matrix__table\n    table\n    is-bordered\n    is-striped\n    is-narrow\n    is-hoverable\n    content is-small\"\n      >\n        <tbody className=\"matrix__table__body\">\n          {table.map(rows => (\n            <tr key={table.indexOf(rows)} className=\"matrix__table__row\">\n              {rows.map(cols => (\n                <td\n                  key={uuidv4()}\n                  className=\"matrix__table__col p-0\"\n                >\n                  <button\n                    type=\"button\"\n                    className={classNames(\n                      'button is-white matrix__table__col-buttom is-small has-text-grey-dark',\n                      {\n                        'has-background-grey-light': lightArray.includes(cols.id),\n                      },\n                    )}\n                    onFocus={() => (setLightArray(getLightVal(X, table, cols.value)))}\n                    onMouseOver={() => (setLightArray(getLightVal(X, table, cols.value)))}\n                    onMouseDown={() => changeValue(cols.id)}\n                  >\n                    <b>{cols.value}</b>\n                  </button>\n                </td>\n              ))}\n              <td className=\"\n            has-background-primary-light\n             matrix__table__sum-buttom\n             p-0\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"button\n                is-primary\n                is-light\n                is-small\n                matrix__table__col-buttom\"\n                  onMouseDown={() => {\n                    dispatch(SetTable(table.filter(elem => (\n                      table.indexOf(elem) !== table.indexOf(rows)))));\n                  }}\n                >\n                  <b>\n                    {getSum(rows)}\n                  </b>\n                </button>\n              </td>\n            </tr>\n          ))}\n          <tr className=\"matrix__table__row p-0\">\n            {getAverage(table).map(averageVal => (\n              <td\n                className=\"\n              matrix__table__row-average\n              p-0\n              has-background-primary-light\n              py-1\n              \"\n                key={uuidv4()}\n              >\n                <b>{averageVal}</b>\n              </td>\n            ))}\n          </tr>\n        </tbody>\n      </table>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(SetTable([...table, getRowMore(table[0].length - 1, col)]))}\n      >\n        Add row\n      </button>\n    </>\n  );\n};\n","/* eslint-disable import/no-unresolved */\n/* eslint-disable import/extensions */\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.scss';\nimport { Table } from './components/Table/Table';\nimport { TableType } from './react-app-env';\nimport { SetM, SetN, SetX } from './store/actions';\n\nconst getRundomInt = (num: number) => {\n  return Math.floor(Math.random() * num) + 1;\n};\n\nexport const App: React.FC = () => {\n  const rowArray: TableType[] = [];\n  const colArray: TableType[] = [];\n  const dispatch = useDispatch();\n\n  function getRownCol() {\n    let x = 0;\n    const lengthsCol = getRundomInt(20);\n    const lengthsRow = getRundomInt(20);\n\n    for (let i = 0; i <= lengthsCol; i++) {\n      colArray.push({ id: uuidv4(), value: getRundomInt(100) });\n    }\n\n    for (let i = 0; i <= lengthsRow; i++) {\n      rowArray.push({ id: uuidv4(), value: getRundomInt(100) });\n    }\n\n    dispatch(SetM(rowArray));\n    dispatch(SetN(colArray));\n    x = getRundomInt((lengthsCol + lengthsRow) - 1);\n    dispatch(SetX(x));\n  }\n\n  useEffect(() => { }, []);\n\n  getRownCol();\n\n  return (\n    <div className=\"matrix\">\n      <div className=\"table-container\">\n        <Table />\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable import/extensions */\nimport { configureStore, createReducer } from '@reduxjs/toolkit';\nimport {\n  SetAverageVal,\n  SetM,\n  SetN,\n  SetTable,\n  SetX,\n} from './actions';\n// eslint-disable-next-line import/no-unresolved\nimport { State } from '../react-app-env';\n\nconst initialState: State = {\n  M: [],\n  N: [],\n  table: [],\n  average: [],\n  delete: [],\n  x: 0,\n};\n\nconst reducer = createReducer(\n  initialState,\n  (builder) => {\n    builder\n      .addCase(SetM, (state, action) => {\n        state.M = action.payload;\n      })\n      .addCase(SetN, (state, action) => {\n        state.N = action.payload;\n      })\n      .addCase(SetTable, (state, action) => {\n        state.table = action.payload;\n      })\n      .addCase(SetAverageVal, (state, action) => {\n        state.average = action.payload;\n      })\n      .addCase(SetX, (state, action) => {\n        state.x = action.payload;\n      });\n  },\n);\n\nexport const store = configureStore({ reducer });\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}